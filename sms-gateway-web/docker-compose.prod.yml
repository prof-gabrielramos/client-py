version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    image: sms-gateway-web:latest
    container_name: sms-gateway-web
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://user:password@db:5432/sms_gateway
      - REDIS_URL=redis://redis:6379/0
      - GATEWAY_URL=${GATEWAY_URL}
      - GATEWAY_API_KEY=${GATEWAY_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sms-gateway.rule=Host(`sms.yourdomain.com`)"
      - "traefik.http.routers.sms-gateway.entrypoints=websecure"
      - "traefik.http.routers.sms-gateway.tls.certresolver=letsencrypt"
      - "traefik.http.services.sms-gateway.loadbalancer.server.port=5000"

  db:
    image: postgres:15-alpine
    container_name: sms-gateway-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=sms_gateway
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: sms-gateway-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: sms-gateway-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - app-network

  backup:
    image: postgres:15-alpine
    container_name: sms-gateway-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    networks:
      - app-network
    command: /scripts/backup.sh

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge